
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGNMENT BEGIN BREAK CLOSE_PARENHESIS COLON COMMA CONTINUE DIV DO ELSE END EQUALLY FUNCTION IF INTEGER LESS MORE MUL NOT NUMBER_INTEGER NUMBER_REAL OPEN_PARENTHESIS OR REAL RETURN SEMICOLON STRING SUB SUM THEN VAR VARIABLE WHILE WRITEprogram : VAR dec_list BEGIN statement_list END\n            | VAR dec_list function_list BEGIN statement_list ENDfunction_list : function\n               | function_list SEMICOLON functionfunction : FUNCTION VARIABLE OPEN_PARENTHESIS dec_list CLOSE_PARENHESIS BEGIN statement_list_function END\n            | FUNCTION VARIABLE OPEN_PARENTHESIS dec_list CLOSE_PARENHESIS BEGIN VAR dec_list statement_list_function ENDstatement_for_function_build : VARIABLE OPEN_PARENTHESIS arguments CLOSE_PARENHESISarguments : argument\n            | arguments SEMICOLON argumentargument : VARIABLE\n            | NUMBER_INTEGER\n            | NUMBER_REAL\n            | OPEN_PARENTHESIS expression CLOSE_PARENHESISdec_list : dec\n               | dec_list SEMICOLON decdec : variable_list COLON typetype : INTEGER\n            | REAL\n            | STRINGvariable_list : VARIABLE\n                | variable_list COMMA VARIABLEstatement_list : statement\n                | statement_list SEMICOLON statementstatement : assign\n            | write\n            | while\n            | ifstatement_list_if : statement_for_if\n                | statement_list_if SEMICOLON statement_for_ifstatement_for_if : assign\n            | write\n            | while\n            | if\n            | CONTINUE\n            | BREAKstatement_list_function : statement_for_function\n                | statement_list_function SEMICOLON statement_for_functionstatement_for_function : assign\n            | write\n            | while\n            | if\n            | returnreturn : RETURN expressionassign : VARIABLE ASSIGNMENT expression\n                | VARIABLE ASSIGNMENT STRINGexpression : addsub\n            | expression SUM addsub\n            | expression SUB addsubaddsub : multiplayer\n            | addsub MUL multiplayer\n            | addsub DIV multiplayermultiplayer : statement_for_function_build\n            | VARIABLE\n            | NUMBER_INTEGER\n            | NUMBER_REAL\n            | OPEN_PARENTHESIS expression CLOSE_PARENHESISwrite : WRITE OPEN_PARENTHESIS expression CLOSE_PARENHESIS\n                | WRITE OPEN_PARENTHESIS STRING CLOSE_PARENHESISwhile : WHILE bool_expression DO BEGIN statement_list ENDif : IF bool_expression THEN BEGIN statement_list_if END ELSE BEGIN statement_list_if END\n            | IF bool_expression THEN BEGIN statement_list_if ENDbool_expression : bool_expression OR bool_expression_addsub\n                | bool_expression_addsub\n                | NOT bool_expression\n                | boolbool_expression_addsub : bool_expression_addsub AND bool\n                | boolbool : OPEN_PARENTHESIS expression EQUALLY expression CLOSE_PARENHESIS\n            | OPEN_PARENTHESIS expression MORE expression CLOSE_PARENHESIS\n            | OPEN_PARENTHESIS expression LESS expression CLOSE_PARENHESIS'
    
_lr_action_items = {'VAR':([0,106,],[2,117,]),'$end':([1,33,64,],[0,-1,-2,]),'VARIABLE':([2,4,7,9,11,13,24,26,28,29,30,31,34,35,36,41,45,55,66,67,68,69,70,74,78,79,80,81,84,106,109,115,117,124,130,131,133,],[6,-14,20,6,27,32,20,-15,-16,-17,-18,-19,20,47,47,47,6,47,83,47,47,47,47,20,47,47,47,20,47,20,83,20,6,47,20,20,20,]),'BEGIN':([3,4,8,10,26,28,29,30,31,44,58,63,82,127,129,137,],[7,-14,24,-3,-15,-16,-17,-18,-19,-4,74,81,106,133,-5,-6,]),'SEMICOLON':([3,4,8,10,14,15,16,17,18,19,26,28,29,30,31,43,44,46,47,48,49,50,51,52,53,54,65,72,73,83,85,86,87,88,89,90,91,92,93,94,98,99,100,101,102,103,104,105,108,110,114,116,118,119,120,121,122,123,125,126,128,129,131,132,134,135,136,137,138,],[9,-14,25,-3,34,-22,-24,-25,-26,-27,-15,-16,-17,-18,-19,34,-4,-23,-53,-44,-45,-46,-49,-52,-54,-55,9,-57,-58,-10,109,-8,-11,-12,-47,-48,-50,-51,-56,34,115,-28,-30,-31,-32,-33,-34,-35,-7,-59,-61,130,-36,-38,-39,-40,-41,-42,-13,-9,-29,-5,9,-43,-37,130,115,-6,-60,]),'FUNCTION':([3,4,25,26,28,29,30,31,],[11,-14,11,-15,-16,-17,-18,-19,]),'CLOSE_PARENHESIS':([4,26,28,29,30,31,47,50,51,52,53,54,56,57,65,71,83,85,86,87,88,89,90,91,92,93,95,96,97,107,108,125,126,],[-14,-15,-16,-17,-18,-19,-53,-46,-49,-52,-54,-55,72,73,82,93,-10,108,-8,-11,-12,-47,-48,-50,-51,-56,111,112,113,125,-7,-13,-9,]),'WRITE':([4,7,24,26,28,29,30,31,34,74,81,106,115,130,131,133,],[-14,21,21,-15,-16,-17,-18,-19,21,21,21,21,21,21,21,21,]),'WHILE':([4,7,24,26,28,29,30,31,34,74,81,106,115,130,131,133,],[-14,22,22,-15,-16,-17,-18,-19,22,22,22,22,22,22,22,22,]),'IF':([4,7,24,26,28,29,30,31,34,74,81,106,115,130,131,133,],[-14,23,23,-15,-16,-17,-18,-19,23,23,23,23,23,23,23,23,]),'RETURN':([4,26,28,29,30,31,106,130,131,],[-14,-15,-16,-17,-18,-19,124,124,124,]),'COLON':([5,6,32,],[12,-20,-21,]),'COMMA':([5,6,32,],[13,-20,-21,]),'INTEGER':([12,],[29,]),'REAL':([12,],[30,]),'STRING':([12,35,36,],[31,49,57,]),'END':([14,15,16,17,18,19,43,46,47,48,49,50,51,52,53,54,72,73,89,90,91,92,93,94,98,99,100,101,102,103,104,105,108,110,114,116,118,119,120,121,122,123,128,132,134,135,136,138,],[33,-22,-24,-25,-26,-27,64,-23,-53,-44,-45,-46,-49,-52,-54,-55,-57,-58,-47,-48,-50,-51,-56,110,114,-28,-30,-31,-32,-33,-34,-35,-7,-59,-61,129,-36,-38,-39,-40,-41,-42,-29,-43,-37,137,138,-60,]),'ASSIGNMENT':([20,],[35,]),'OPEN_PARENTHESIS':([21,22,23,27,35,36,39,41,47,55,59,60,66,67,68,69,70,78,79,80,84,109,124,],[36,41,41,45,55,55,41,55,66,55,41,41,84,55,55,55,55,55,55,55,55,84,55,]),'NOT':([22,23,39,],[39,39,39,]),'NUMBER_INTEGER':([35,36,41,55,66,67,68,69,70,78,79,80,84,109,124,],[53,53,53,53,87,53,53,53,53,53,53,53,53,87,53,]),'NUMBER_REAL':([35,36,41,55,66,67,68,69,70,78,79,80,84,109,124,],[54,54,54,54,88,54,54,54,54,54,54,54,54,88,54,]),'DO':([37,38,40,61,75,76,77,111,112,113,],[58,-63,-65,-64,-62,-67,-66,-68,-69,-70,]),'OR':([37,38,40,42,61,75,76,77,111,112,113,],[59,-63,-65,59,59,-62,-67,-66,-68,-69,-70,]),'THEN':([38,40,42,61,75,76,77,111,112,113,],[-63,-65,63,-64,-62,-67,-66,-68,-69,-70,]),'AND':([38,40,75,76,77,111,112,113,],[60,-67,60,-67,-66,-68,-69,-70,]),'MUL':([47,50,51,52,53,54,89,90,91,92,93,108,],[-53,69,-49,-52,-54,-55,69,69,-50,-51,-56,-7,]),'DIV':([47,50,51,52,53,54,89,90,91,92,93,108,],[-53,70,-49,-52,-54,-55,70,70,-50,-51,-56,-7,]),'SUM':([47,48,50,51,52,53,54,56,62,71,89,90,91,92,93,95,96,97,107,108,132,],[-53,67,-46,-49,-52,-54,-55,67,67,67,-47,-48,-50,-51,-56,67,67,67,67,-7,67,]),'SUB':([47,48,50,51,52,53,54,56,62,71,89,90,91,92,93,95,96,97,107,108,132,],[-53,68,-46,-49,-52,-54,-55,68,68,68,-47,-48,-50,-51,-56,68,68,68,68,-7,68,]),'EQUALLY':([47,50,51,52,53,54,62,89,90,91,92,93,108,],[-53,-46,-49,-52,-54,-55,78,-47,-48,-50,-51,-56,-7,]),'MORE':([47,50,51,52,53,54,62,89,90,91,92,93,108,],[-53,-46,-49,-52,-54,-55,79,-47,-48,-50,-51,-56,-7,]),'LESS':([47,50,51,52,53,54,62,89,90,91,92,93,108,],[-53,-46,-49,-52,-54,-55,80,-47,-48,-50,-51,-56,-7,]),'CONTINUE':([81,115,133,],[104,104,104,]),'BREAK':([81,115,133,],[105,105,105,]),'ELSE':([114,],[127,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'dec_list':([2,45,117,],[3,65,131,]),'dec':([2,9,45,117,],[4,26,4,4,]),'variable_list':([2,9,45,117,],[5,5,5,5,]),'function_list':([3,],[8,]),'function':([3,25,],[10,44,]),'statement_list':([7,24,74,],[14,43,94,]),'statement':([7,24,34,74,],[15,15,46,15,]),'assign':([7,24,34,74,81,106,115,130,131,133,],[16,16,16,16,100,119,100,119,119,100,]),'write':([7,24,34,74,81,106,115,130,131,133,],[17,17,17,17,101,120,101,120,120,101,]),'while':([7,24,34,74,81,106,115,130,131,133,],[18,18,18,18,102,121,102,121,121,102,]),'if':([7,24,34,74,81,106,115,130,131,133,],[19,19,19,19,103,122,103,122,122,103,]),'type':([12,],[28,]),'bool_expression':([22,23,39,],[37,42,61,]),'bool_expression_addsub':([22,23,39,59,],[38,38,38,75,]),'bool':([22,23,39,59,60,],[40,40,40,76,77,]),'expression':([35,36,41,55,78,79,80,84,124,],[48,56,62,71,95,96,97,107,132,]),'addsub':([35,36,41,55,67,68,78,79,80,84,124,],[50,50,50,50,89,90,50,50,50,50,50,]),'multiplayer':([35,36,41,55,67,68,69,70,78,79,80,84,124,],[51,51,51,51,51,51,91,92,51,51,51,51,51,]),'statement_for_function_build':([35,36,41,55,67,68,69,70,78,79,80,84,124,],[52,52,52,52,52,52,52,52,52,52,52,52,52,]),'arguments':([66,],[85,]),'argument':([66,109,],[86,126,]),'statement_list_if':([81,133,],[98,136,]),'statement_for_if':([81,115,133,],[99,128,99,]),'statement_list_function':([106,131,],[116,135,]),'statement_for_function':([106,130,131,],[118,134,118,]),'return':([106,130,131,],[123,123,123,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> VAR dec_list BEGIN statement_list END','program',5,'p_program','parserr.py',23),
  ('program -> VAR dec_list function_list BEGIN statement_list END','program',6,'p_program','parserr.py',24),
  ('function_list -> function','function_list',1,'p_def_list','parserr.py',32),
  ('function_list -> function_list SEMICOLON function','function_list',3,'p_def_list','parserr.py',33),
  ('function -> FUNCTION VARIABLE OPEN_PARENTHESIS dec_list CLOSE_PARENHESIS BEGIN statement_list_function END','function',8,'p_def','parserr.py',42),
  ('function -> FUNCTION VARIABLE OPEN_PARENTHESIS dec_list CLOSE_PARENHESIS BEGIN VAR dec_list statement_list_function END','function',10,'p_def','parserr.py',43),
  ('statement_for_function_build -> VARIABLE OPEN_PARENTHESIS arguments CLOSE_PARENHESIS','statement_for_function_build',4,'p_statement_for_def_build','parserr.py',52),
  ('arguments -> argument','arguments',1,'p_arguments','parserr.py',57),
  ('arguments -> arguments SEMICOLON argument','arguments',3,'p_arguments','parserr.py',58),
  ('argument -> VARIABLE','argument',1,'p_arg','parserr.py',68),
  ('argument -> NUMBER_INTEGER','argument',1,'p_arg','parserr.py',69),
  ('argument -> NUMBER_REAL','argument',1,'p_arg','parserr.py',70),
  ('argument -> OPEN_PARENTHESIS expression CLOSE_PARENHESIS','argument',3,'p_arg','parserr.py',71),
  ('dec_list -> dec','dec_list',1,'p_dec_list','parserr.py',80),
  ('dec_list -> dec_list SEMICOLON dec','dec_list',3,'p_dec_list','parserr.py',81),
  ('dec -> variable_list COLON type','dec',3,'p_dec','parserr.py',90),
  ('type -> INTEGER','type',1,'p_type','parserr.py',95),
  ('type -> REAL','type',1,'p_type','parserr.py',96),
  ('type -> STRING','type',1,'p_type','parserr.py',97),
  ('variable_list -> VARIABLE','variable_list',1,'p_variable_list','parserr.py',102),
  ('variable_list -> variable_list COMMA VARIABLE','variable_list',3,'p_variable_list','parserr.py',103),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parserr.py',112),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list','parserr.py',113),
  ('statement -> assign','statement',1,'p_statement','parserr.py',122),
  ('statement -> write','statement',1,'p_statement','parserr.py',123),
  ('statement -> while','statement',1,'p_statement','parserr.py',124),
  ('statement -> if','statement',1,'p_statement','parserr.py',125),
  ('statement_list_if -> statement_for_if','statement_list_if',1,'p_statement_list_if','parserr.py',131),
  ('statement_list_if -> statement_list_if SEMICOLON statement_for_if','statement_list_if',3,'p_statement_list_if','parserr.py',132),
  ('statement_for_if -> assign','statement_for_if',1,'p_statement_for_if','parserr.py',141),
  ('statement_for_if -> write','statement_for_if',1,'p_statement_for_if','parserr.py',142),
  ('statement_for_if -> while','statement_for_if',1,'p_statement_for_if','parserr.py',143),
  ('statement_for_if -> if','statement_for_if',1,'p_statement_for_if','parserr.py',144),
  ('statement_for_if -> CONTINUE','statement_for_if',1,'p_statement_for_if','parserr.py',145),
  ('statement_for_if -> BREAK','statement_for_if',1,'p_statement_for_if','parserr.py',146),
  ('statement_list_function -> statement_for_function','statement_list_function',1,'p_statement_list_def','parserr.py',152),
  ('statement_list_function -> statement_list_function SEMICOLON statement_for_function','statement_list_function',3,'p_statement_list_def','parserr.py',153),
  ('statement_for_function -> assign','statement_for_function',1,'p_statement_for_def','parserr.py',162),
  ('statement_for_function -> write','statement_for_function',1,'p_statement_for_def','parserr.py',163),
  ('statement_for_function -> while','statement_for_function',1,'p_statement_for_def','parserr.py',164),
  ('statement_for_function -> if','statement_for_function',1,'p_statement_for_def','parserr.py',165),
  ('statement_for_function -> return','statement_for_function',1,'p_statement_for_def','parserr.py',166),
  ('return -> RETURN expression','return',2,'p_return','parserr.py',172),
  ('assign -> VARIABLE ASSIGNMENT expression','assign',3,'p_assign','parserr.py',176),
  ('assign -> VARIABLE ASSIGNMENT STRING','assign',3,'p_assign','parserr.py',177),
  ('expression -> addsub','expression',1,'p_expression','parserr.py',181),
  ('expression -> expression SUM addsub','expression',3,'p_expression','parserr.py',182),
  ('expression -> expression SUB addsub','expression',3,'p_expression','parserr.py',183),
  ('addsub -> multiplayer','addsub',1,'p_addsub','parserr.py',192),
  ('addsub -> addsub MUL multiplayer','addsub',3,'p_addsub','parserr.py',193),
  ('addsub -> addsub DIV multiplayer','addsub',3,'p_addsub','parserr.py',194),
  ('multiplayer -> statement_for_function_build','multiplayer',1,'p_multiplayer','parserr.py',203),
  ('multiplayer -> VARIABLE','multiplayer',1,'p_multiplayer','parserr.py',204),
  ('multiplayer -> NUMBER_INTEGER','multiplayer',1,'p_multiplayer','parserr.py',205),
  ('multiplayer -> NUMBER_REAL','multiplayer',1,'p_multiplayer','parserr.py',206),
  ('multiplayer -> OPEN_PARENTHESIS expression CLOSE_PARENHESIS','multiplayer',3,'p_multiplayer','parserr.py',207),
  ('write -> WRITE OPEN_PARENTHESIS expression CLOSE_PARENHESIS','write',4,'p_write','parserr.py',215),
  ('write -> WRITE OPEN_PARENTHESIS STRING CLOSE_PARENHESIS','write',4,'p_write','parserr.py',216),
  ('while -> WHILE bool_expression DO BEGIN statement_list END','while',6,'p_while','parserr.py',220),
  ('if -> IF bool_expression THEN BEGIN statement_list_if END ELSE BEGIN statement_list_if END','if',10,'p_if','parserr.py',224),
  ('if -> IF bool_expression THEN BEGIN statement_list_if END','if',6,'p_if','parserr.py',225),
  ('bool_expression -> bool_expression OR bool_expression_addsub','bool_expression',3,'p_bool_expression','parserr.py',234),
  ('bool_expression -> bool_expression_addsub','bool_expression',1,'p_bool_expression','parserr.py',235),
  ('bool_expression -> NOT bool_expression','bool_expression',2,'p_bool_expression','parserr.py',236),
  ('bool_expression -> bool','bool_expression',1,'p_bool_expression','parserr.py',237),
  ('bool_expression_addsub -> bool_expression_addsub AND bool','bool_expression_addsub',3,'p_bool_expression_addsub','parserr.py',249),
  ('bool_expression_addsub -> bool','bool_expression_addsub',1,'p_bool_expression_addsub','parserr.py',250),
  ('bool -> OPEN_PARENTHESIS expression EQUALLY expression CLOSE_PARENHESIS','bool',5,'p_bool','parserr.py',262),
  ('bool -> OPEN_PARENTHESIS expression MORE expression CLOSE_PARENHESIS','bool',5,'p_bool','parserr.py',263),
  ('bool -> OPEN_PARENTHESIS expression LESS expression CLOSE_PARENHESIS','bool',5,'p_bool','parserr.py',264),
]
